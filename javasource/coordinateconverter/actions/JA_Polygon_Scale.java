// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package coordinateconverter.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class JA_Polygon_Scale extends CustomJavaAction<java.lang.String>
{
	private final java.lang.String PolygonString;
	private final java.math.BigDecimal ScaleFactor;

	public JA_Polygon_Scale(
		IContext context,
		java.lang.String _polygonString,
		java.math.BigDecimal _scaleFactor
	)
	{
		super(context);
		this.PolygonString = _polygonString;
		this.ScaleFactor = _scaleFactor;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Step 1: Parse the input string
        List<double[]> points = parsePolygonString(PolygonString);

        // Step 2: Calculate the centroid
        double[] centroid = calculateCentroid(points);

        // Step 3: Scale the polygon
        List<double[]> scaledPoints = new ArrayList<>();
        for (double[] point : points) {
            double[] scaledPoint = new double[2];
            scaledPoint[0] = centroid[0] + (point[0] - centroid[0]) * ScaleFactor.doubleValue();
            scaledPoint[1] = centroid[1] + (point[1] - centroid[1]) * ScaleFactor.doubleValue();
            scaledPoints.add(scaledPoint);
        }

        // Step 4: Reassemble the string
        return assemblePolygonString(scaledPoints);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_Polygon_Scale";
	}

	// BEGIN EXTRA CODE
	private static List<double[]> parsePolygonString(String polygonString) {
	    List<double[]> points = new ArrayList<>();
	    // Remove the very first '[' and the very last ']' to clean the string
	    String cleanString = polygonString.substring(1, polygonString.length() - 1);
	    // Split the string into coordinate pairs
	    String[] pointStrings = cleanString.split("\\],\\[");
	    for (String point : pointStrings) {
	        // Remove any remaining brackets and split by comma to get latitude and longitude
	        String[] latLong = point.replace("[", "").replace("]", "").split(",");
	        try {
	            double latitude = Double.parseDouble(latLong[0]);
	            double longitude = Double.parseDouble(latLong[1]);
	            points.add(new double[]{latitude, longitude});
	        } catch (NumberFormatException e) {
	            System.err.println("Error parsing number: " + e.getMessage());
	            // Optionally, handle the error more gracefully or rethrow as a custom exception
	        }
	    }
	    return points;
	}

    private static double[] calculateCentroid(List<double[]> points) {
        double centroidX = 0, centroidY = 0;
        for (double[] point : points) {
            centroidX += point[0];
            centroidY += point[1];
        }
        centroidX /= points.size();
        centroidY /= points.size();
        return new double[]{centroidX, centroidY};
    }

    private static String assemblePolygonString(List<double[]> scaledPoints) {
        StringBuilder sb = new StringBuilder("[");
        for (int i = 0; i < scaledPoints.size(); i++) {
            double[] point = scaledPoints.get(i);
            if (i > 0) sb.append(",");
            sb.append("[").append(point[0]).append(",").append(point[1]).append("]");
        }
        sb.append("]");
        return sb.toString();
    }
	// END EXTRA CODE
}
