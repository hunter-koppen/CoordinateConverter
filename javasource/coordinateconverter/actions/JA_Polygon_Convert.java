// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package coordinateconverter.actions;

import java.util.ArrayList;
import java.util.List;
import org.locationtech.proj4j.CRSFactory;
import org.locationtech.proj4j.CoordinateReferenceSystem;
import org.locationtech.proj4j.CoordinateTransform;
import org.locationtech.proj4j.CoordinateTransformFactory;
import org.locationtech.proj4j.ProjCoordinate;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class JA_Polygon_Convert extends CustomJavaAction<java.lang.String>
{
	private final java.lang.String PolygonString;
	private final java.lang.String SourceEpsgCode;
	private final java.lang.String TargetEpsgCode;

	public JA_Polygon_Convert(
		IContext context,
		java.lang.String _polygonString,
		java.lang.String _sourceEpsgCode,
		java.lang.String _targetEpsgCode
	)
	{
		super(context);
		this.PolygonString = _polygonString;
		this.SourceEpsgCode = _sourceEpsgCode;
		this.TargetEpsgCode = _targetEpsgCode;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
        // Parse input polygon to a list of coordinate pairs
        List<ProjCoordinate> polygonCoordinates = parseInputPolygon(PolygonString);
        
        CRSFactory crsFactory = new CRSFactory();
        CoordinateReferenceSystem sourceCrs = crsFactory.createFromName(SourceEpsgCode);
        CoordinateReferenceSystem targetCrs = crsFactory.createFromName(TargetEpsgCode);

        CoordinateTransformFactory transformFactory = new CoordinateTransformFactory();
        CoordinateTransform transform = transformFactory.createTransform(sourceCrs, targetCrs);

        List<ProjCoordinate> convertedPolygon = new ArrayList<>();
        for (ProjCoordinate initialCoordinate : polygonCoordinates) {
            ProjCoordinate convertedCoordinate = new ProjCoordinate();
            transform.transform(initialCoordinate, convertedCoordinate);
            convertedPolygon.add(convertedCoordinate);
        }
        
        String formattedConvertedPolygon = formatConvertedPolygon(convertedPolygon);
        return formattedConvertedPolygon;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_Polygon_Convert";
	}

	// BEGIN EXTRA CODE
	private static List<ProjCoordinate> parseInputPolygon(String inputPolygon) {
	    List<ProjCoordinate> polygonCoordinates = new ArrayList<>();

	    // Remove the leading and trailing brackets
	    String trimmedInput = inputPolygon.substring(1, inputPolygon.length() - 1);

	    // Split the string to get each coordinate pair
	    String[] coordinatePairs = trimmedInput.split("\\],\\[");

	    for (String pair : coordinatePairs) {
	        // Split each pair to get x and y values
	        String[] xy = pair.split(",");

	        // Remove any additional brackets from the split operation
	        String xStr = xy[0].replace("[", "").replace("]", "").trim();
	        String yStr = xy[1].replace("[", "").replace("]", "").trim();

	        // Parse x and y values as doubles
	        double x = Double.parseDouble(xStr);
	        double y = Double.parseDouble(yStr);

	        // Create a ProjCoordinate object and add it to the list
	        ProjCoordinate coord = new ProjCoordinate(x, y);
	        polygonCoordinates.add(coord);
	    }

	    return polygonCoordinates;
	}
	
    private static String formatConvertedPolygon(List<ProjCoordinate> convertedPolygon) {
        StringBuilder sb = new StringBuilder("[");
        for (int i = 0; i < convertedPolygon.size(); i++) {
            ProjCoordinate coord = convertedPolygon.get(i);
            if (i > 0) sb.append(",");
            sb.append("[").append(coord.x).append(",").append(coord.y).append("]");
        }
        sb.append("]");
        return sb.toString();
    }
	// END EXTRA CODE
}
