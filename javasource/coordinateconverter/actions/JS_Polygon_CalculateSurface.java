// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package coordinateconverter.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class JS_Polygon_CalculateSurface extends CustomJavaAction<java.lang.Long>
{
	private final java.lang.String PolygonString;

	public JS_Polygon_CalculateSurface(
		IContext context,
		java.lang.String _polygonString
	)
	{
		super(context);
		this.PolygonString = _polygonString;
	}

	@java.lang.Override
	public java.lang.Long executeAction() throws Exception
	{
		// BEGIN USER CODE
		List<double[]> vertices = parsePolygonString(PolygonString);
		
		double area = 0.0;
        if (vertices.size() < 3) {
            throw new IllegalArgumentException("Polygon must have at least 3 points");
        }

        for (int i = 0; i < vertices.size(); i++) {
            double[] current = vertices.get(i);
            double[] next = vertices.get((i + 1) % vertices.size());
            
            double segmentArea = (degToRad(next[1] - current[1]) *
                    (2 + Math.sin(degToRad(current[0])) +
                    Math.sin(degToRad(next[0])))) / 2;
            area += segmentArea;
        }

        area = area * 6371000 * 6371000 / 2;
        return (long) Math.abs(area); // Area should be positive
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JS_Polygon_CalculateSurface";
	}

	// BEGIN EXTRA CODE
    private static List<double[]> parsePolygonString(String polygonString) {
        List<double[]> vertices = new ArrayList<>();
        // Removing the leading '[[', trailing ']]', and splitting the string into lat,long pairs
        String[] pairs = polygonString.substring(2, polygonString.length() - 2).split("\\],\\[");
        for (String pair : pairs) {
            String[] latLong = pair.split(",");
            double latitude = Double.parseDouble(latLong[0]);
            double longitude = Double.parseDouble(latLong[1]);
            vertices.add(new double[]{latitude, longitude});
        }
        return vertices;
    }
    
    private static double degToRad(double degrees) {
        return degrees * Math.PI / 180;
    }
	// END EXTRA CODE
}
